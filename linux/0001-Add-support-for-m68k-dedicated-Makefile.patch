From 1750c25e0f998f06830234f97f8bae517260d9b0 Mon Sep 17 00:00:00 2001
From: Jean-Michel Hautbois <jeanmichel.hautbois@yoseli.org>
Date: Thu, 11 Apr 2024 17:54:44 +0200
Subject: [PATCH] Add support for m68k dedicated Makefile

The purpose is to be able to call uImage for the m68k.

Signed-off-by: Jean-Michel Hautbois <jeanmichel.hautbois@yoseli.org>
---
 arch/m68k/Makefile      |  9 +++++-
 arch/m68k/boot/Makefile | 69 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 77 insertions(+), 1 deletion(-)
 create mode 100644 arch/m68k/boot/Makefile

diff --git a/arch/m68k/Makefile b/arch/m68k/Makefile
index 43e39040d3ac6..8474e9a0aaf80 100644
--- a/arch/m68k/Makefile
+++ b/arch/m68k/Makefile
@@ -88,8 +88,15 @@ endif
 
 libs-y				+= arch/m68k/lib/
 
+boot := arch/m68k/boot
 
-all:	zImage
+all:   uImage
+
+zImage zImage.srec uImage uImage.srec vmlinux.srec: vmlinux
+	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
+
+archclean:
+	$(Q)$(MAKE) $(clean)=$(boot)
 
 lilo:	vmlinux
 	if [ -f $(INSTALL_PATH)/vmlinux ]; then mv -f $(INSTALL_PATH)/vmlinux $(INSTALL_PATH)/vmlinux.old; fi
diff --git a/arch/m68k/boot/Makefile b/arch/m68k/boot/Makefile
new file mode 100644
index 0000000000000..83fe6c7d57456
--- /dev/null
+++ b/arch/m68k/boot/Makefile
@@ -0,0 +1,69 @@
+#
+# arch/m68k/boot/Makefile
+#
+# Based on arch/sh/boot/Makefile by Stuart Menefy
+#
+# Copyright (C) 2008-2011 Freescale Semiconductor, Inc.  All Rights Reserved.
+#	by Kurt Mahan <kmahan@freescale.com>
+#
+# This file is subject to the terms and conditions of the GNU General Public
+# License.  See the file "COPYING" in the main directory of this archive
+# for more details.
+#
+
+MKIMAGE := $(srctree)/scripts/mkuboot.sh
+
+#
+# Assign safe dummy values if these variables are not defined,
+# in order to suppress error message.
+#
+CONFIG_SDRAM_BASE	?= 0x40000000
+CONFIG_IMG_START	?= 0x00020000
+
+export CONFIG_SDRAM_BASE CONFIG_IMG_START
+
+targets := zImage zImage.srec vmlinux.srec uImage uImage.srec
+
+$(obj)/zImage: $(obj)/vmlinux.bin FORCE
+	$(call if_changed,gzip)
+	@echo '  Image $@ is ready'
+
+OBJCOPYFLAGS_zImage.srec := -I binary -O srec
+$(obj)/zImage.srec: $(obj)/zImage
+	$(call if_changed,objcopy)
+
+KERNEL_LOAD	:= $(shell /bin/bash -c 'printf "0x%08x" \
+		     $$[$(CONFIG_SDRAM_BASE)  + \
+			$(CONFIG_IMG_START)]')
+
+KERNEL_ENTRY	:= $(shell /bin/bash -c 'printf "0x%08x" \
+		     $$[$(CONFIG_SDRAM_BASE)  + \
+			$(CONFIG_IMG_START)]')
+
+UIMAGE_LOADADDR	:= $(KERNEL_LOAD)
+quiet_cmd_uimage = UIMAGE  $@
+	cmd_uimage = $(CONFIG_SHELL) $(MKIMAGE) -A m68k -O linux -T kernel \
+		   -C none -a $(KERNEL_LOAD) -e $(KERNEL_ENTRY) \
+		   -n 'Linux-$(KERNELRELEASE)' -d $< $@
+
+$(obj)/uImage: $(obj)/vmlinux.bin FORCE
+	$(call if_changed,uimage)
+	@echo '  Image $@ is ready'
+
+$(obj)/vmlinux.bin: vmlinux FORCE
+	$(call if_changed,objcopy)
+
+$(obj)/vmlinux.bin.gz: $(obj)/vmlinux.bin FORCE
+	$(call if_changed,gzip)
+
+OBJCOPYFLAGS_vmlinux.srec := -I binary -O srec
+$(obj)/vmlinux.srec: $(obj)/vmlinux.bin
+	$(call if_changed,objcopy)
+
+OBJCOPYFLAGS_uImage.srec := -I binary -O srec
+$(obj)/uImage.srec: $(obj)/uImage
+	$(call if_changed,objcopy)
+
+clean-files	+= uImage uImage.srec \
+		   zImage zImage.srec \
+		   vmlinux.srec vmlinux.bin vmlinux.bin.gz
-- 
2.40.1

